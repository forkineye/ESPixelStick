; PlatformIO Project Configuration File for ESPixelStick
; https://docs.platformio.org/page/projectconf.html
;
; Local configuration should be done in platformio_user.ini

[platformio]
src_dir = ./src
data_dir = ./data
build_cache_dir = ./.pio/.buildcache
packages_dir = ./.pio/packages
cache_dir = ./.pio/cache
extra_configs = platformio_user.ini
default_envs = esp32_bigboi
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;
; Baseline build environment                                         ;
; https://docs.platformio.org/en/latest/projectconf/section_env.html ;
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;
[env]
framework = arduino
monitor_speed = 115200
upload_speed = 921600
lib_compat_mode = strict
build_type = release
lib_deps =
    adafruit/Adafruit PWM Servo Driver Library @ ^2.4.0
    bblanchon/ArduinoJson @ ^7.3.0
    djgrrr/Int64String @ ^1.1.1
    forkineye/ESPAsyncE131 @ ^1.0.5
    https://github.com/greiman/SdFat @ ^2.3.0
    https://github.com/mathieucarbou/ESPAsyncWebServer @ ^3.6.0
    ottowinter/AsyncMqttClient-esphome @ ^0.8.6
    https://github.com/paulstoffregen/Time @ ^1.6.1
    https://github.com/MartinMueller2003/Artnet
    https://github.com/MartinMueller2003/Espalexa
    https://github.com/MartinMueller2003/SimpleFTPServer
    https://github.com/bitbank2/unzipLIB
    olikraus/U8g2@^2.36.5
extra_scripts =
    .scripts/download_fs.py
    pre:.scripts/pio-version.py
    post:.scripts/CopyTargets.py
    post_efu.py
build_flags =
    -D ENABLE_DEDICATED_SPI=1 ; instruct SdFat to take ownership of the spi device
    -D SDFAT_FILE_TYPE=3 ; SdFat full support
    -D USE_LONG_FILE_NAMES=1 ; SdFat
    -D MAINTAIN_FREE_CLUSTER_COUNT=1 ; SdFat
    -D CHECK_FLASH_PROGRAMMING=0 ; SdFat
    -D INCLUDE_SDIOS=1 ; SdFat
;    -D USE_DBG_MACROS=2 ; SdFat
    -D SUPPORT_FTP
;    -D FTP_SERVER_DEBUG
;    -D FTP_ADDITIONAL_DEBUG
;    -D MAKECRCH=1 ; force the unzip to make the CRC table dynamically
;    -D DYNAMIC_CRC_TABLE=1 ; unzip uses this
;    -D DEBUG_FSEQ
    -D NOBYFOUR=1 ; reduced unzip table size
    -D DISABLE_FS_H_WARNING=1
    -I ./ESPixelStick/src
    -I ./include
    -mtext-section-literals
    -Wl,-Map=firmware.map
    -Wl,--cref
;    -fstack-protector-all
lib_ignore =
	ESP Async WebServer	; force the use of the esphome version
	AsyncTCP			; force the use of the esphome version
	LittleFS_esp32		; force the use of the ESP32 built into the core version

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;
; ESP8266 defaults for 4MB flash                                     ;
; https://docs.platformio.org/en/latest/platforms/espressif8266.html ;
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;
[esp8266]
platform = espressif8266 @ ^4.2.1 ; Arduino Core v3.0.2
board_build.f_cpu = 160000000L
board_build.filesystem = littlefs
board_build.ldscript = eagle.flash.4m2m.ld
; build_type = debug
; monitor_filters = esp8266_exception_decoder ; requires build_type = debug
build_flags =
    ${env.build_flags}
    -D PIO_FRAMEWORK_ARDUINO_LWIP2_HIGHER_BANDWIDTH_LOW_FLASH
    -D NDEBUG        ; https://github.com/esp8266/Arduino/issues/3978
    -D FP_IN_IROM    ; https://github.com/esp8266/Arduino/pull/7180
    -D PIO_FRAMEWORK_ARDUINO_MMU_CACHE16_IRAM48
;    -D VTABLES_IN_IRAM
    -D VTABLES_IN_FLASH
    -D DEFAULT_FTP_SERVER_NETWORK_TYPE_ESP8266=2
    -D DEFAULT_STORAGE_TYPE_ESP8266=2
;    -D DEBUG_ESP_PORT=Serial
;    -D DEBUG_ESP_OOM
lib_ignore =
    Ethernet ; Remove once Art-Net is fixed / replaced to not depend on Ethernet in lib config
lib_deps =
    ${env.lib_deps}
    esphome/ESPAsyncTCP-esphome @ ^2.0.0
    me-no-dev/ESPAsyncUDP
extra_scripts =
    ${env.extra_scripts}
    pre:.scripts/deleteSD.py

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;
; ESP32 defaults for 4MB flash                                     ;
; https://docs.platformio.org/en/latest/platforms/espressif32.html ;
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;
[esp32]
platform = espressif32 @ 6.10.0
board_build.filesystem = littlefs
board_build.partitions = ESP32_partitions.csv
monitor_filters = esp32_exception_decoder
; monitor_filters = esp32_exception_decoder, time
build_flags =
    ${env.build_flags}
    -D ARDUINO_LOOP_STACK_SIZE=12288
    -D DEFAULT_FTP_SERVER_NETWORK_TYPE_ESP32=6
    -D DEFAULT_STORAGE_TYPE_ESP32=2
    -D SUPPORT_UNZIP=1
    -D CONFIG_DISABLE_HAL_LOCKS=1
    -D CONFIG_RMT_ISR_IRAM_SAFE=yes
;    -D USE_SERIAL_DEBUG_COUNTERS=1
;    -D USE_RMT_DEBUG_COUNTERS=1
;    -D USE_PIXEL_DEBUG_COUNTERS=1
;    -D DEBUG_RMT_XLAT_ISSUES=1
    -D DEBUG_FILE_HANDLES=1
build_unflags =
    ${env.build_unflags}
    -D BOARD_HAS_PSRAM
    -mfix-esp32-psram-cache-issue
    -mfix-esp32-psram-cache-strategy=memw

lib_deps =
    ${env.lib_deps}
    mathieucarbou/AsyncTCP @ ^3.2.14
    mathieucarbou/OneWire @ ^2.3.9
    https://github.com/matmunk/DS18B20
extra_scripts = ${env.extra_scripts}
    .scripts/replace_fs.py

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;
; ESP32 pulling from upstream core ;
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;
[esp32git]
extends = esp32
build_flags =
    ${esp32.build_flags}
platform = https://github.com/platformio/platform-espressif32
;platform_packages =
;    framework-arduinoespressif32 @ https://github.com/espressif/arduino-esp32.git#3.0.4
board_build.arduino.upstream_packages = no

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;
; Build targets (environments) ;
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;








[env:esp32_bigboi]
extends = esp32
board = bigboi
board_build.flash_mode = qio
board_build.f_flash = 80000000L
build_flags =
    ${esp32.build_flags}
    -D BOARD_NAME=\"esp32_BigBoi\"
    -D BOARD_ESP32_WROVER
    -D SUPPORT_OLED

; big boi (pixel Rick)
[env:esp32_bigboi_debug]
extends = esp32
board = bigboi
build_type = debug
build_flags =
    ${esp32.build_flags}
    -D BOARD_NAME=\"esp32_BigBoi\"
    -D BOARD_ESP32_WROVER
    -D SUPPORT_OLED
debug_tool = custom
monitor_speed = 115200
debug_init_cmds =
  target remote localhost:3333
  monitor reset halt
  flushregs

; small man (trickle pixel)
[env:esp32_smallman]
extends = esp32
board = smallman
build_flags =
    ${esp32.build_flags}
    -D BOARD_NAME=\"esp32_smallman\"
    -D BOARD_ESP32_DEV4
    -D SUPPORT_OLED

; tiny dancer
[env:esp32_tiny]
extends = esp32
board = tiny
build_flags =
    ${esp32.build_flags}
    -D BOARD_NAME=\"esp32_tinydancer\"
    -D BOARD_ESP32_TINY


; small man (trickle pixel)
[env:esp32_babyboi]
extends = esp32
board = tiny
board_build.f_cpu = 240000000
board_build.f_flash = 80000000
board_build.flash_mode = qio
build_flags =
    ${esp32.build_flags}
    -D BOARD_NAME=\"esp32_babyboi\"
    -D BOARD_ESP32_D1JT
    -D SUPPORT_OLED

; small man (trickle pixel)
[env:esp32_babyboi_dbg]
extends = esp32
board = tiny
build_type = debug
build_flags =
    ${esp32.build_flags}
    -D BOARD_NAME=\"esp32_babyboi\"
    -D BOARD_ESP32_D1JT
    -D SUPPORT_OLED
debug_tool = custom
monitor_speed = 115200
debug_init_cmds =
  target remote localhost:3333
  monitor reset halt
  flushregs
  
[alias:post_efu]
targets = buildprog, buildfs
